function [clist] = trackOptiClist(dirname,CONST,header)
% trackOptiClist : generates an array called the clist
% which contains non time dependent information for each cell. 
% Fluorescence values contained are for at birth time.
% To see the information contained type clist.def'.
%
% INPUT :
%       dirname : seg folder eg. maindirectory/xy1/seg
%       CONST : segmentation constants
%       header : string displayed with information
% OUTPUT :
%       clist : array with the above info for each cell in the frame
%
% Copyright (C) 2016 Wiggins Lab
% Written by Paul Wiggins.
% University of Washington, 2016
% This file is part of SuperSegger.
%
% SuperSegger is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% SuperSegger is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with SuperSegger.  If not, see <http://www.gnu.org/licenses/>.

if ~exist('header','var')
    header = [];
end

if(nargin<1 || isempty(dirname))
    dirname = '.';
end
dirname = fixDir(dirname);

% Get the track file names...
contents=dir([dirname '*_err.mat']);

if isempty( contents )
    clist.data = [];
    clist.def={};
    clist.gate=[];
else
    data_c = loaderInternal([dirname,contents(end).name]);
    MAX_CELL = max(10000, max(data_c.regs.ID) + 100);
    num_im = numel(contents);
    
    if CONST.parallel.show_status
        h = waitbar( 0, 'Making Cells.');
    else
        h = [];
    end
    
    clist = [];
    clist.def = { '1: Cell ID', ...
        '2: Region Num Birth', ...
        '3: Region Num Divide', ...
        '4: Cell Birth Time', ...
        '5: Cell Division Time', ...
        '6: Cell Age', ...
        '7: Cell Dist to edge', ...
        '8: Old Pole Age', ...
        '9: Long Axis Birth', ...
        '10: Long Axis Divide',...
        '11: stat0', ...
        '12: Short Axis Birth', ...
        '13: Short Axis Death', ...
        '14: Area Birth', ...
        '15: Area Death', ...
        '16: score birth', ...
        '17: score death', ...
        '18: x position birth',...
        '19: y position birth',...
        '20: fluor1 sum', ...
        '21: fluor1 mean', ...
        '22: fluor2 sum', ...
        '23: fluor2 mean', ...
        '24: number of neighbors',...
        '25: region gray val',...
        ...
        '26: locus1_1 longaxis', ...
        '27: locus1_1 shortaxis',...
        '28: locus1_1 score', ...
        '29: locus1_1 Intensity',...
        '30: locus1_2 longaxis', ...
        '31: locus1_2 shortaxis',...
        '32: locus1_2 score', ...
        '33: locus1_2 Intensity',...
        ...
        '34: locus1_3 longaxis', ...
        '35: locus1_3 shortaxis',...
        '36: locus1_3 score', ...
        '37: locus1_3 Intensity',...
        ...
        '38: locus1_4 longaxis', ...
        '39: locus1_4 shortaxis',...
        '40: locus1_4 score', ...
        '41: locus1_4 Intensity',...
        ...
        '42: locus1_5 longaxis', ...
        '43: locus1_5 shortaxis',...
        '44: locus1_5 score', ...
        '45: locus1_5 Intensity',...
        ...
        '46: neighbors sharing pole',...
        ...
        '47: locus1_1_longaxis normalized',...
        '48: locus1_2_longaxis normalized',...
        '49: locus1_3_longaxis normalized',...
        '50: locus1_4_longaxis normalized',...
        '51: locus1_5_longaxis normalized',...
        ...
        '52: locus1_1_shortaxis normalized',...
        '53: locus1_2_shortaxis normalized',...
        '54: locus1_3_shortaxis normalized',...
        '55: locus1_4_shortaxis normalized',...
        '56: locus1_5_shortaxis normalized',...
        ...
        '57: locus1_1_gaussianFitWidth',...
        '58: locus1_2_gaussianFitWidth',...
        '59: locus1_3_gaussianFitWidth',...
        ...
        '60: mother ID',...
        '61: daughter1 ID',...
        '62: daughter2 ID'...
        ...
        '63: Cum Error Fluor Change Channel 1 (not used)',...
        '64: Cum Error Fluor Change Channel 2 (not used)',...
        '65: Cum Error Shape Spheroplast',...
        ...
        '66: Cum Error Fluor Change Channel 1 blind',...
        '67: Cum Error Fluor Change Channel 2 blind',...
        '68: dl max',...
        '69: dl min',...
        '70: l/l_birth'...
        };
    
    % These fields are updated in every frame to be set to the death value.
    death_ind = [3,5,6,10,11,13,15,17,61,62,63,64,65,66,67,68,69,70];
    
    clist_tmp = nan( MAX_CELL, numel( clist.def));
    clist_tmp(:,1) = 0;
    
    %initialize case neighbor flag is not set
    share_pole = [];
    
    % loop through all the images (*err.mat files)
    for i = 1:num_im
        
        data_c = loaderInternal([dirname,contents(i  ).name]);
        
        % record the number of cell neighbors
        if CONST.trackOpti.NEIGHBOR_FLAG && ...
                ~isfield( data_c.CellA{1}, 'numNeighbors' )
            for ii = 1:data_c.regs.num_regs
                nei_ = numel(trackOptiNeighbors(data_c,ii));
                data_c.CellA{ii}.numNeighbors = nei_ ;
            end
        end
        
        
        % switch the locus positions so that it is aligned to the old and
        % new pole ( old is positive)
        if isfield(CONST.trackOpti,'pole_flag') && CONST.trackOpti.pole_flag == 1
            data_c = getNeighborPole(data_c) ;
            share_pole = drill(data_c.CellA, '.neighbor_pole');
            data_c = poleDirection(data_c);
        end
        
        % figure out which cells are new born.
        maxID = max(clist_tmp(:,1));
        ID = data_c.regs.ID;
        birthID = (ID>maxID);
        ci = and( ~birthID, logical(ID));
        
        IDnz = ID(ID>0);
        IDlog = ID>0;
        
        lold     = nan(1,numel(ID));
        lbirth   = nan(1,numel(ID));
        dlmaxOld = nan(1,numel(ID));
        dlminOld = nan(1,numel(ID));
        
        lold(IDlog) = clist_tmp(IDnz,10);
        lbirth(IDlog) = clist_tmp(IDnz,9);
        dlmaxOld(IDlog) = clist_tmp(IDnz,68);
        dlminOld(IDlog) = clist_tmp(IDnz,69);
        
        regnum = (1:data_c.regs.num_regs)';
        zz = zeros( data_c.regs.num_regs, 1);
        
        cell_dist = drill(data_c.CellA,'.cell_dist');
        pole_age  = drill(data_c.CellA,'.pole.op_age');
        fl1sum = drill(data_c.CellA,'.fl1.sum');
        fl2sum  = drill(data_c.CellA,'.fl2.sum');
        Area = drill(data_c.CellA,'.coord.A');
        xpos = drill(data_c.CellA,'.coord.rcm(1)');
        ypos = drill(data_c.CellA,'.coord.rcm(2)');
        numNeighbors = drill(data_c.CellA,'.numNeighbors');
        gray = drill(data_c.CellA,'.gray');
        
        locus1_L1 = drill(data_c.CellA, '.locus1(1).longaxis');
        locus1_L2 = drill(data_c.CellA, '.locus1(1).shortaxis');
        locus1_s = drill(data_c.CellA, '.locus1(1).score');
        locus1_i = drill(data_c.CellA, '.locus1(1).intensity');
        
        locus2_L1 = drill(data_c.CellA, '.locus1(2).longaxis');
        locus2_L2 = drill(data_c.CellA, '.locus1(2).shortaxis');
        locus2_s = drill(data_c.CellA, '.locus1(2).score');
        locus2_i = drill(data_c.CellA, '.locus1(2).intensity');
        
        locus3_L1 = drill(data_c.CellA, '.locus1(3).longaxis');
        locus3_L2 = drill(data_c.CellA, '.locus1(3).shortaxis');
        locus3_s = drill(data_c.CellA, '.locus1(3).score');
        locus3_i = drill(data_c.CellA, '.locus1(3).intensity');
        
        locus4_L1 = drill(data_c.CellA, '.locus1(4).longaxis');
        locus4_L2 = drill(data_c.CellA, '.locus1(4).shortaxis');
        locus4_s = drill(data_c.CellA, '.locus1(4).score');
        locus4_i = drill(data_c.CellA, '.locus1(4).intensity');
        
        locus5_L1 = drill(data_c.CellA, '.locus1(5).longaxis');
        locus5_L2 = drill(data_c.CellA, '.locus1(5).shortaxis');
        locus5_s = drill(data_c.CellA, '.locus1(5).score');
        locus5_i = drill(data_c.CellA, '.locus1(5).intensity');
        
        daughter1_id = drill(data_c.regs.daughterID,'(1)');
        daughter2_id = drill(data_c.regs.daughterID,'(2)');
        
        length1 = drill(data_c.CellA,'.length(1)');
        length2 = drill(data_c.CellA,'.length(2)');
        
        locus1_relL1 = (locus1_L1)./length1;
        locus2_relL1 = (locus2_L1)./length1;
        locus3_relL1 = (locus3_L1)./length1;
        locus4_relL1 = (locus4_L1)./length1;
        locus5_relL1 = (locus5_L1)./length1;
        
        locus1_relL2 = (locus1_L2)./length2;
        locus2_relL2 = (locus2_L2)./length2;
        locus3_relL2 = (locus3_L2)./length2;
        locus4_relL2 = (locus4_L2)./length2;
        locus5_relL2 = (locus5_L2)./length2;
        
        locus1_fitSigma  = drill(data_c.CellA,'.locus1(1).fitSigma');
        locus2_fitSigma  = drill(data_c.CellA,'.locus1(2).fitSigma');
        locus3_fitSigma   = drill(data_c.CellA,'.locus1(3).fitSigma');
        
        if CONST.trackOpti.LYSE_FLAG
            errorColor1Cum = data_c.regs.lyse.errorColor1Cum;
            errorColor2Cum = data_c.regs.lyse.errorColor2Cum;
            errorShapeCum  = data_c.regs.lyse.errorShapeCum;
            errorColor1bCum = data_c.regs.lyse.errorColor1bCum;
            errorColor2bCum = data_c.regs.lyse.errorColor2bCum;
        else
            errorColor1Cum  = nan(size(ID));
            errorColor2Cum  = nan(size(ID));
            errorShapeCum   = nan(size(ID));
            errorColor1bCum = nan(size(ID));
            errorColor2bCum = nan(size(ID));
        end
        
        
        lnew = data_c.regs.L1;
        dl = (lnew-lold);
        dlmin = nan(size(dl));
        dlmax = nan(size(dl));
        
        indTmp = isnan(dlminOld);
        dlmin( indTmp ) = dl( indTmp);
        
        indTmp = isnan(dlmaxOld);
        dlmax( indTmp ) = dl( indTmp);
        
        indTmp = isnan(dl);
        dlmin( indTmp ) = dlminOld( indTmp);
        dlmax( indTmp ) = dlmaxOld( indTmp);
        
        indTmp = ~isnan(dl+dlminOld);
        dlmin( indTmp ) = min( [dl( indTmp);dlminOld( indTmp )]);
        
        indTmp = ~isnan(dl+dlmaxOld);
        dlmax( indTmp ) = max( [dl( indTmp);dlmaxOld( indTmp )]);
        
        lrel = lnew./lbirth;
        
        tmp = [ ID', ...
            regnum, ...
            regnum, ...
            i + zz, ...
            i + zz, ...
            i - data_c.regs.birth', ...
            cell_dist', ...
            pole_age', ...
            data_c.regs.L1', ...
            data_c.regs.L1', ...
            data_c.regs.stat0', ...
            data_c.regs.L2', ...
            data_c.regs.L2', ...
            Area',...
            Area',...
            data_c.regs.scoreRaw',...
            data_c.regs.scoreRaw',...
            xpos',...
            ypos',...
            fl1sum',...
            fl1sum'./Area',...
            fl2sum',...
            fl2sum'./Area',...
            numNeighbors',...
            gray',...
            ...
            locus1_L1',...
            locus1_L2',...
            locus1_s',...
            locus1_i',...
            ...
            locus2_L1',...
            locus2_L2',...
            locus2_s',...
            locus2_i',...
            ...
            locus3_L1',...
            locus3_L2',...
            locus3_s',...
            locus3_i',...
            ...
            locus4_L1',...
            locus4_L2',...
            locus4_s',...
            locus4_i'...
            ...
            locus5_L1',...
            locus5_L2',...
            locus5_s',...
            locus5_i',...
            share_pole',...
            ...
            locus1_relL1',...
            locus2_relL1',...
            locus3_relL1',...
            locus4_relL1',...
            locus5_relL1',...
            ...
            locus1_relL2',...
            locus2_relL2',...
            locus3_relL2',...
            locus4_relL2',...
            locus5_relL2',...
            ...
            locus1_fitSigma',...
            locus2_fitSigma',...
            locus3_fitSigma',...
            ...
            data_c.regs.motherID',...
            daughter1_id',...
            daughter2_id'...
            ...
            errorColor1Cum',...
            errorColor2Cum',...
            errorShapeCum'...
            ...
            errorColor1bCum',...
            errorColor2bCum',...
            ...
            dlmax',...
            dlmin',...
            lrel'...
            ];
        
        % these are the cells that were born in this frame
        try
            clist_tmp(ID(birthID), : ) = tmp(birthID, :);
        catch ME
            printError(ME);
        end
        
        % update guys that you want to set to the death value
        clist_tmp(ID(ci), death_ind ) = tmp(ci, death_ind);
        
        if CONST.parallel.show_status
            waitbar(i/num_im,h,['Clist--Frame: ',num2str(i),'/',num2str(num_im)]);
        elseif CONST.parallel.verbose
            disp([header, 'Clist frame: ',num2str(i),' of ',num2str(num_im)]);
        end
        
        
    end
    
    % save the updated err files.
    if CONST.parallel.show_status
        close(h);
    end
    
    clist.data = clist_tmp(logical(clist_tmp(:,1)),:);
    clist.gate = CONST.trackLoci.gate;
    clist.neighbor = [];
    
    if CONST.trackOpti.NEIGHBOR_FLAG
        clist.neighbor = trackOptiListNeighbor(dirname,CONST,[]);
    end
end
end

function data = loaderInternal( filename )
data = load( filename);
end